
//----------------------------------------------------------------------//
//	CMDR Clicker's Elite Dangerous Thrustmaster Warthog + TFRP Script	//
//----------------------------------------------------------------------//

// This file: ED_Macros.ttm (v4.1.0b) ... supports Elite Dangerous v3.4 (Beyond Chapter 4)

// Refer Change Log.txt in same folder

// LEGEND: 
// ========================================================
// fnName()					refer to ED_Functions file
// initName()				refer to ED_Functions file
// fnsName()				refer to ED_StateTracker file
// tgName()					refer to ED_Toggles file
// mName					refer to ED_Macros file
// MapKey statements		refer to ED_MapKeyAssignment file
// Global Defines			refer to ED_Defines file
// Global Variables			refer to ED_GlobalVars file
// User Config Settings		refer to ED_UserSettings file
// ========================================================

// Index:	Line		FUNCTION
//			Line 50:	fnCustomCommands()
//			Line 62:	mRequestDock 
//			Line 75:	mDeploySRV 
//			Line 87:	mBoardShip 
//			Line 104:	mShowGameStats
//			Line 109:	mFastModeSwitch0 
//			Line 120:	mFastModeSwitch1 
//			Line 134:	mFastModeSwitch2
//			Line 147:	mReportCrimesToggle
//			Line 168:	mNAVBeaconWing
//			Line 193:	mNAVBeaconOff
//			Line 217:	mClearAllChatBox
//			Line 256:	mClearChatBox
//			Line 268:	mEnterHanger
//			Line 297:	mLaunch


// START

	int	mRequestDock, mDeploySRV, mShowGameStats, mReportCrimesToggle, mNAVBeaconWing, mNAVBeaconOff;
	int	mFastModeSwitch0, mFastModeSwitch1, mFastModeSwitch2, mClearAllChatBox, mClearChatBox, mBoardShip;
	int mEnterHanger, mLaunch;

//---------------//
// CUSTOM MACROS //			// MACROS Include a series of automated key presses to perform a specific task.
//---------------//

	int fnCustomCommands() {

		// Initialise char arrays for various functions
		Dim(&myJson, 512);			// Initilise status.json string variables
		myJson[0] = 0;

		Dim(&lastJson, 512); 
		lastJson[0]=0;
		
		// Select MapKey Assignment profile
		if (Flags == 0 & TrainingEnabled) {
			TrainingKeyMap();
			if (AnnounceTraining) {
				DeferCall(1000, &fnTextToSpeech, "Training mode ON, press a button or switch to hear what it does");
			}
			printf("\x0a\Training Mode Enabled\x0a");
		}
		else {
			MainKeyMap();
			if (AnnounceTraining) {			
				DeferCall(1000, &fnTextToSpeech, "Training mode not available, enable this feature via E D User Settings file");
			}
			printf("\x0a\Training Mode Disabled\x0a");
		}
		
		// Initialise macros

		// MACRO: Auto-Docking Request
		mRequestDock = CHAIN(
			LOCK+PULSE+TargetPanel, D(500),						// 1, e, e, left, right, spc, left, q, q, 1
			PULSE+UINextPanel, D(),								// Limitation: This will only work correctly if Target Panel cursor in
			PULSE+UINextPanel, D(),								//			   default/orig position, else will be misaligned.
			PULSE+UILeft, D(),
			PULSE+UIRight, D(),
			PULSE+UISelect, D(500),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIBack,
			LOCK);

		// MACRO: SRV - Deploy
		mDeploySRV = CHAIN (
			LOCK+PULSE+RolePanel, D(500),						// 3, down, spc, down, down, up, up, spc
			PULSE+UIDown, D(),
			PULSE+UISelect, D(500),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UIUp, D(),
			PULSE+UIUp, D(),
			PULSE+UISelect, D(500),
			LOCK);

		// MACRO: SRV - Board Ship
		mBoardShip = CHAIN (
			LOCK+PULSE+RolePanel, D(250),						// 3, spc, down, down, down, down, down, up, up, spc
			PULSE+UISelect, D(1500),
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),								// sticking in 3 extra 'down' to try to get this macro reliable!
			PULSE+UIDown, D(200),
			PULSE+UIDown, D(200),
			PULSE+UIUp, D(200),
			PULSE+UIUp, D(200),
//			PULSE+UISelect, D(500),								// Testing...until the macro is reliable
			LOCK);

		// MACRO: Display the combined OSD FPS & Bandwidth meters
		mShowGameStats = CHAIN(
			PULSE+ShowFramerate, D(500),						// L_CTRL+F
			PULSE+ShowConnectionStatus);						// L_CTRL+B

		// MACRO: Menulog to OPEN
		mFastModeSwitch0 = CHAIN(
			LOCK+PULSE+RolePanel, D(250),						// Select any panel to ensure GUIFocus is set (!=0)		
			PULSE+MenuLog, D(750),								// p, up, spc, spc, <wait>, spc, spc
			PULSE+UIUp, D(500),
			PULSE+UISelect, D(600),
			PULSE+UISelect, D(6500),							// ** Depending on the load times of your PC, this value may need to be
			PULSE+UISelect, D(600),								// changed/increased (6000ms is default)
			PULSE+UISelect, D(600),								// Select OPEN Mode
			LOCK);

		// MACRO: Menulog to PRIVATE GROUP
		mFastModeSwitch1 = CHAIN(
			LOCK+PULSE+RolePanel, D(250),						// Select any panel to ensure GUIFocus is set (!=0)		
			PULSE+MenuLog, D(750),								// p, up, spc, spc, <wait>, spc, right, spc, spc, right, spc
			PULSE+UIUp, D(500),
			PULSE+UISelect, D(600),
			PULSE+UISelect, D(6500),							// ** Depending on the load times of your PC, this value may need to be
			PULSE+UISelect, D(600),								//    changed/increased
			PULSE+UIRight, D(600),
			PULSE+UISelect, D(600),
			PULSE+UIRight, D(600),
			PULSE+UISelect, D(600),								// Selects Private Group
			LOCK);

		// MACRO: Menulog to SOLO
		mFastModeSwitch2 = CHAIN(
			LOCK+PULSE+RolePanel, D(250),						// Select any panel to ensure GUIFocus is set (!=0)		
			PULSE+MenuLog, D(750),								// p, up, spc, spc, <wait>, spc, right, right, spc
			PULSE+UIUp, D(500),
			PULSE+UISelect, D(600),
			PULSE+UISelect, D(6500),							// ** Depending on the load times of your PC, this value may need to be
			PULSE+UISelect, D(600),								//    changed/increased
			PULSE+UIRight, D(600),
			PULSE+UIRight, D(600),
			PULSE+UISelect, D(600),								// Selects SOLO mode
			LOCK);

		// MACRO: Toggle 'Report Crimes' on/off
		mReportCrimesToggle = CHAIN(
			LOCK+PULSE+SystemPanel, D(500),						// 4, e, e, e, down, down, right, right, spc, left, left, up, up, q, q, q, 4
			PULSE+UINextPanel, D(),								// Limitation: This will only work correctly if Target Panel cursor in
			PULSE+UINextPanel, D(),								//			   default/orig position, else will be misaligned.
			PULSE+UINextPanel, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UIRight, D(),
			PULSE+UIRight, D(),
			PULSE+UISelect, D(500),
			PULSE+UILeft, D(),		 							// send selector back to home position when done
			PULSE+UILeft, D(),
			PULSE+UIUp, D(),
			PULSE+UIUp, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIBack,
			LOCK);

		// MACRO: Toggle 'NAV Beacon' ON
		mNAVBeaconWing = CHAIN(
			LOCK+PULSE+SystemPanel, D(500),						// 4, e, e, e, right, down, down, down, down, spc, down, spc, up, up, up, up, left, q, q, q, 4
			PULSE+UINextPanel, D(),								// Limitation: This will only work correctly if Target Panel cursor in
			PULSE+UINextPanel, D(),								//			   default/orig position, else will be misaligned.
			PULSE+UINextPanel, D(),
			PULSE+UIRight, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UISelect, D(500),
			PULSE+UIDown, D(),
			PULSE+UISelect, D(500),
			PULSE+UIUp, D(),		 							// send selector back to home position when done
			PULSE+UIUp, D(),
			PULSE+UIUp, D(),
			PULSE+UIUp, D(),
			PULSE+UILeft, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIBack,
			LOCK);

		// MACRO: Toggle 'NAV Beacon' OFF
		mNAVBeaconOff = CHAIN(
			LOCK+PULSE+SystemPanel, D(500),						// 4, e, e, e, right, down, down, down, down, spc, spc, up, up, up, up, left, q, q, q, 4
			PULSE+UINextPanel, D(),								// Limitation: This will only work correctly if Target Panel cursor in
			PULSE+UINextPanel, D(),								//			   default/orig position, else will be misaligned.
			PULSE+UINextPanel, D(),
			PULSE+UIRight, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UIDown, D(),
			PULSE+UISelect, D(500),
			PULSE+UISelect, D(500),
			PULSE+UIUp, D(),		 							// send selector back to home position when done
			PULSE+UIUp, D(),
			PULSE+UIUp, D(),
			PULSE+UIUp, D(),
			PULSE+UILeft, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIPrevPanel, D(),
			PULSE+UIBack,
			LOCK);

		// MACRO: Send '/clear' command to clear any text in all 3 chat box windows
		mClearAllChatBox = CHAIN(
			LOCK+PULSE+QuickCommsPanel, D(500),					// enter, enter, 2, left, enter, /, c, l, e, a, r, enter, left, down
			PULSE+QuickCommsPanel, D(500),							// repeat 3x
			PULSE+CommsPanel, D(500),
			PULSE+UILeft, D(),
			PULSE+QuickCommsPanel, D(),
			PULSE+'\/', D(),
			PULSE+'c', D(),
			PULSE+'l', D(),
			PULSE+'e', D(),
			PULSE+'a', D(),
			PULSE+'r', D(),
			PULSE+QuickCommsPanel, D(500),
			PULSE+UILeft, D(),
			PULSE+UIDown, D(),
			PULSE+QuickCommsPanel, D(),
			PULSE+'\/', D(),
			PULSE+'c', D(),
			PULSE+'l', D(),
			PULSE+'e', D(),
			PULSE+'a', D(),
			PULSE+'r', D(),
			PULSE+QuickCommsPanel, D(500),
			PULSE+UILeft, D(),
			PULSE+UIDown, D(),
			PULSE+QuickCommsPanel, D(),
			PULSE+'\/', D(),
			PULSE+'c', D(),
			PULSE+'l', D(),
			PULSE+'e', D(),
			PULSE+'a', D(),
			PULSE+'r', D(),
			PULSE+QuickCommsPanel, D(500),
			PULSE+UILeft, D(),
			PULSE+UIDown, D(),
			PULSE+CommsPanel, D(),			
			LOCK);

		// MACRO: Send '/clear' command to clear any text in the chat box.
		mClearChatBox = CHAIN(
			LOCK+PULSE+QuickCommsPanel, D(500),					// enter, /, c, l, e, a, r, enter
			PULSE+'\/', D(),
			PULSE+'c', D(),
			PULSE+'l', D(),
			PULSE+'e', D(),
			PULSE+'a', D(),
			PULSE+'r', D(),
			PULSE+QuickCommsPanel, D(500),
			LOCK);
			
		// MACRO: Enter hanger then facilities + refuel/repair/restock
		mEnterHanger = CHAIN(
			LOCK+PULSE+UIDown, D(),								// down, spc, up, spc, right, right, down, spc, down, spc, down, spc
			PULSE+UISelect, D(750),								// Enter hanger
			PULSE+UIUp, D(),
			PULSE+UISelect, D(5000),							// Station Services
			PULSE+UIRight, D(),
			PULSE+UIRight, D(),
			PULSE+UIDown, D(),
			PULSE+UISelect, D(1750),							// Refuel
			PULSE+UIDown, D(),
			PULSE+UISelect, D(1750),							// Repair
			PULSE+UIDown, D(),
			PULSE+UISelect, D(1750),							// Restock
			PULSE+UIUp, D(),									// up, up, up, spc, right, right, spc, left, left, spc
			PULSE+UIUp, D(),									// Go back up to very top...
			PULSE+UIUp, D(),									// ...because there are 3, sometimes 4 menu items below...
			PULSE+UIUp, D(),									// 
			PULSE+UISelect, D(1250),							// Advanced Maintenance
			PULSE+UIRight, D(),
			PULSE+UIRight, D(),			
			PULSE+UISelect, D(2000),							// Repair Ship Integrity
			PULSE+UILeft, D(),			
			PULSE+UILeft, D(),			
			PULSE+UISelect, D(),								// Back to main Station Services Menu
			LOCK);
			
		// MACRO: Launch the ship (from Launchpad screen)
		// Issue: Rise time varies between ships and thruster power.
		// Issue: Don't set throttle to 25%
		mLaunch = CHAIN(
			LOCK+PULSE+UIDown, D(500),							// down, down, spc, (wait 19), R (hold for 1.5), L
			PULSE+UIDown, D(500),
			PULSE+UISelect, D(20000),
			DOWN+ThrustUp, D(1500),								// Hold down for 1.5
			UP+ThrustUp, D(500),
			PULSE+LandingGear, D(1000),
			LOCK);
			
	}	// End of fnCustomCommands()

// END
