
//----------------------------------------------------------------------//
//	CMDR Clicker's Elite Dangerous Thrustmaster Warthog + TFRP Script	//
//----------------------------------------------------------------------//

// This file: ED_Main.tmc (v4.2.0) ... supports Elite Dangerous v3.7 (Fleet Carriers)

// Uses REXEC to read status.json every second and process Flags key value echa time it changes

// Refer Change Log.txt in same folder

// LEGEND: 
// ========================================================
// fnName()					refer to ED_Functions file
// initName()				refer to ED_Functions file
// fnsName()				refer to ED_StateTracker file
// tgName()					refer to ED_Toggles file
// mName					refer to ED_Macros file
// MapKey statements		refer to ED_MapKeyAssignment file
// Global Defines			refer to ED_Defines file
// Global Variables			refer to ED_GlobalVars file
// User Config Settings		refer to ED_UserSettings file
// ========================================================

// Index:	Line		FUNCTION
//			Line 36:	includes statements
//			Line 62: 	int main()
//			Line 135:	int EventHandle()


// START

// -------------- //
// included files //
// -------------- //

include "target.tmh"

// 'target.tmh' include is mandatory.
// defines.tmh and hid.tmh are included via target.tmh
// sys.tmh is included via hid.tmh
// These are bundled with the TARGET software.
// You do not need to package with your script bundle unless you have modified them.

include "ED_GlobalVars.tmh"				// The order that these files are 'included' matters
include "ED_Defines.ttm"
include "ED_UserSettings.tmh"
include "ED_MapKeyAssignment.tmh"
include "ED_Functions.tmh"
include "ED_StateTracker.tmh"
include "ED_Toggles.tmh"
include "ED_Macros.tmh"
//include "ED_MacrosFC.tmh"				// Enter Hanger macro changed for Fleet Carriers BETA
//include "ED_CommsControl.tmh"			// Under development


// --------------- //
// program startup //
// --------------- //

	int main() {
			
		Exclude(&HCougar);
		Exclude(&T16000);
		Exclude(&T16000L);
		Exclude(&JoystickF18);
		Exclude(&TWCSThrottle);
		Exclude(&TFRPHARudder);
		Exclude(&LMFD);
		Exclude(&RMFD);
		
		if (EnableTFRPRudder) {
			Configure(&TFRPRudder, MODE_FILTERED);
		}
		else {
			Exclude(&TFRPRudder);
		}
		
		if(Init(&EventHandle)) return 1;
				
// ---------------------------------------- //
// Initialise LEDs, variables and functions //
// ---------------------------------------- //

		SetKBRate(PulseTime, DelayTime);										// Base Settings 	(See EDSettings.tmh)
		SetKBLayout(KBLayout);

//		ActKey(PULSE+KEYON+LED(&Throttle, LED_INTENSITY, SetLED)); 				// Set overall LED back-light intensity...
//		fnSetLEDs();
		
		fnCustomCommands();														// Initialise Custom Macros (See EDMacros.tmh)
		fnPIPMode(0);															// Reset PIPMode

		fnsMyStates(LOAD);														// Load my ststaus variables
		
		fnsStartCheck();														// Check for vital files and game start		
		initTextToSpeech();														// Initialise Text-To-Speech engine
		initSoundFX();															// Initialise Sound Effects engine
//		initCommsChannels();													// Initialise Voice Communications 


// -------------------------- //
// Initialise Flight controls //
// -------------------------- //

		SetShiftButton(&Joystick, S3, &Throttle, PSF, PSB);						// ** DO NOT TOUCH **  Joystick S3 for IO, Throttle pinky SWITCH for UMD
		
		initJoystickAxis();
		initThrottleAxis();														// Includes Throttle "Friction Control" Slider
		
		if(EnableTFRPRudder) {
			initTFRPRudder();
		}
		else {
			printf("Rudder Axis	... disabled		");
		}

//		fnSetJoystickCurves(MILD, NOPRINT);										// Initialise for default position of Autopilot switch
		
		StartupLock = 0;														// Set in EDSettings.tmh. Reset now initialisation is complete
		
		if(Flags == 0) printf("\x0aWaiting for Game to load...\x0a");

	}	// end of int main()
	

	int EventHandle(int type, alias o, int x) {
		DefaultMapping(&o, x);
	}

// END
