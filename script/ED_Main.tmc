
//----------------------------------------------------------------------//
//	CMDR Clicker's Elite Dangerous Thrustmaster Warthog + TFRP Script	//
//----------------------------------------------------------------------//

// This file: ED_Main.tmc (v4.2.1) ... supports Elite Dangerous v3.7 (Fleet Carriers)

// Uses REXEC to read status.json every second and process Flags key value echa time it changes

// Refer Change Log.txt in same folder

// LEGEND: 
// ========================================================
// fnName()					refer to ED_Functions file
// initName()				refer to ED_Functions file
// fnsName()				refer to ED_StateTracker file
// tgName()					refer to ED_Toggles file
// mName					refer to ED_Macros file
// MapKey statements		refer to ED_MapKeyAssignment file
// Global Defines			refer to ED_Defines file
// Global Variables			refer to ED_GlobalVars file
// User Config Settings		refer to ED_UserSettings file
// ========================================================

// Index:	Line		FUNCTION
//			Line 45:	include statements
//			Line 58: 	int main()
//			Line 117:	int EventHandle()


// START

// -------------- //
// included files //
// -------------- //

include "target.tmh"

// 'target.tmh' include is mandatory.
// defines.tmh and hid.tmh are included via target.tmh
// sys.tmh is included via hid.tmh
// These are bundled with the TARGET software.
// You do not need to package with your script bundle unless you have modified them.

include "ED_GlobalVars.tmh"				// The order that these files are 'included' matters
include "ED_Defines.ttm"
include "ED_UserSettings.tmh"
include "ED_Macros.tmh"
include "ED_MapKeyAssignment.tmh"
include "ED_Functions.tmh"
include "ED_StateTracker.tmh"
include "ED_Toggles.tmh"

// --------------- //
// program startup //
// --------------- //

	int main() {
	
		printf("\x0a\++	Exclude unwanted controllers	...	");
			
		Exclude(&HCougar);
		Exclude(&T16000);
		Exclude(&T16000L);
		Exclude(&JoystickF18);
		Exclude(&TWCSThrottle);
		Exclude(&TFRPHARudder);
		Exclude(&LMFD);
		Exclude(&RMFD);
		Exclude(&A320Pilot);
		Exclude(&A320Copilot);
		
		if (EnableTFRPRudder) {
			Configure(&TFRPRudder, MODE_FILTERED);
		}
		else {
			Exclude(&TFRPRudder);
		}
		
		printf("done	++\x0a\x0a");
		printf("++	Connect our controllers ... \x0a\x0a");
		
		if(Init(&EventHandle)) return 1;
				
	// ---------------------------------------- //
	// Initialise LEDs, variables and functions //
	// ---------------------------------------- //
	
		printf("\x0a\++	Initialise hardware	...	Start	++\x0a"); 

		SetShiftButton(&Joystick, S3, &Throttle, PSF, PSB);						// ** DO NOT TOUCH **  Joystick S3 for IO, Throttle pinky SWITCH for UMD

		SetKBRate(PulseTime, DelayTime);										// Base Settings 	(See ED_UserSettings.tmh)
		SetKBLayout(KBLayout);													//					(See ED_Defines.ttm)
	
		fnCustomCommands();														// Initialise Custom Macros (See EDMacros.tmh)
		fnPIPMode(0);															// Reset PIPMode

		fnsMyStates(LOAD);														// Load my status variables
		
		fnLEDBrightness();														// Set initial LED Brightness levels
		initTextToSpeech();														// Initialise Text-To-Speech engine
		initSoundFX();															// Initialise Sound Effects engine
		

	// -------------------------- //
	// Initialise Flight controls //
	// -------------------------- //
		
		initJoystickAxis();
		initThrottleAxis();														// Includes Throttle "Friction Control" Slider
		initTFRPRudder();

		printf("\x0a\++	Initialise Hardware	...	Complete	++\x0a");
		
		fnsStartCheck();														// Check for vital files and game start
				
		if(Flags == 0) {
			printf("Script initialized @ %s \x0a", fnGetTOD());
			printf("\x0aWaiting for Game to load...\x0a");	
		}

	}	// end of int main()
	

	int EventHandle(int type, alias o, int x) {
		DefaultMapping(&o, x);
	}

// END
