//----------------------------------------------------------------------//
//	CMDR Clicker's Elite Dangerous Thrustmaster Warthog + TFRP Script	//
//----------------------------------------------------------------------//

// This file: ED_MapKeyAssignment.tmh (v4.2.1) ... supports Elite Dangerous v3.7 (Fleet Carriers)

// Contains MapKey Statements for all button and switch actions
// Contains MapKey Statements to announce via TextToSpeech and printf for each button or switch action (training mode)

// Refer Change Log.txt in same folder

// LEGEND: 
// ========================================================
// fnName()					refer to ED_Functions file
// initName()				refer to ED_Functions file
// fnsName()				refer to ED_StateTracker file
// tgName()					refer to ED_Toggles file
// mName					refer to ED_Macros file
// MapKey statements		refer to ED_MapKeyAssignment file
// Global Defines			refer to ED_Defines file
// Global Variables			refer to ED_GlobalVars file
// User Config Settings		refer to ED_UserSettings file
// ========================================================

// Index:	Line		FUNCTION
//			Line 38: 	int MainKeyMap()
//			Line 613: 	int TrainingMap()


// START

// -------------------------- //
//  KeyMaps for Running Game  //
// -------------------------- //

	// FUNCTION:	This MapKey set is called from fnGameStarted() when we detect Game is running
	
	int MainKeyMap() {
	
// ---------------------------------------- //
// Map Joystick triggers, switches and hats //
// ---------------------------------------- //

		// Include MapKey for everything.
		// Include MapKeyR only where used.
				
//		(Gun Trigger - Primary Fire)
//		----------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, TG1, PrimaryFire);
		}
		else {
			MapKeyUMD(&Joystick, TG1,			// (Gun Trigger - Stage 1)
				EXEC("tgTriggerMode(1);"),																		// U - Increment trigger mode for shifted Primary Fire
				EXEC("fnAdvFireControl(0);"),																	// M - Default Primary Fire action
				EXEC("fnAdvFireControl(1);")																	// D - Shifted Primary Fire action
				);
				
			MapKeyRUMD(&Joystick, TG1,			// TG1 RELEASE
				0,																								// U -
				PrimaryFire,																					// M - Release trigger
				0																								// D -			
				);
		}
				
		MapKey(&Joystick, TG2, 0);				// (Gun Trigger - Stage 2)										// <not currently used>

//		(Master Mode Control Button)
//		----------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, S1, PULSE+DeployHardpoints);
		}
		else {		
			MapKeyUMD(&Joystick, S1,
				EXEC("tgHUDMode();"),																			// U - Toggle - Analysis/Combat Mode
				EXEC("tgHardpoints();"),																		// M - Deploy/Retract Hard-points
				PULSE+SwapRollYaw																				// D - Toggle Joystick X-Axis between Roll and Yaw
				);
		}
	
//		(Weapons Release Button - Secondary Fire)
//		-----------------------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, S2, SecondaryFire);
		}
		else {		
			MapKeyUMD(&Joystick, S2,
				EXEC("tgTriggerMode(2);"),																		// U - Swap trigger action between timed and press-to-fire/press-to-stop
				EXEC("fnAdvFireControl(2);"),																	// M - Default Secondary Fire action
				EXEC("fnAdvFireControl(3);")																	// D - Shifted Secondary Fire action
				);
				
			MapKeyRUMD(&Joystick, S2,				// S2 RELEASE
				0,																								// U -
				SecondaryFire,																					// M - Release trigger 
				0																								// D -
				);
		}
	
// 		(Nosewheel Steering Button)
//		---------------------------

		MapKey(&Joystick, S3, 0);																				//  ** DO NOT TOUCH ** Used as ShiftButton for IOUMD

//		(Joystick Pinky Lever Switch)
//		-----------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, S4, PULSE+FlightAssist);
		}
		else {		
			MapKey(&Joystick, S4, EXEC("tgEnhancedFAOFF();"));													// TOGGLE: FA-OFF/ON
		}

//		China Hat (Trim Switch)
//		-----------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, H1U, PULSE+NextFireGroup);
			MapKey(&Joystick, H1D, PULSE+PrevFireGroup);
			MapKey(&Joystick, H1L, PULSE+LandingGear);
			MapKey(&Joystick, H1R, PULSE+ShipLights);
		}
		else {		
			MapKeyUMD(&Joystick, H1U,
				EXEC("tgFSSMode();"),																			// U - Toggle FSS Mode
				PULSE+NextFireGroup,																			// M - Select Next Fire Group
				PULSE+DSSModeOFF																				// D - Toggle DSSMode
				);
	
			MapKey(&Joystick, H1D, PULSE+PrevFireGroup);														// Select Previous Fire Group
		
			MapKey(&Joystick, H1L, TEMPO(0, EXEC("tgLandingGear(0);"), LongPress));								// Long Press = Toggle Landing Gear (avoids accidental toggle)
		
			MapKeyUMD(&Joystick, H1R,
				EXEC("tgLights(1);"),																			// U - Turn on Night Vision
				TEMPO(0,	EXEC("tgLights(0);"), LongPress),													// M - Long Press = Toggle Ship Lights (avoids accidental toggle)
				0																								// D - 
				);
		}
		
//		(Target Management Switch)		// Target Designator
//		--------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, H2U, PULSE+SelectTargetAhead);
			MapKey(&Joystick, H2D, PULSE+SelectHighestThreat);
			MapKey(&Joystick, H2L, PULSE+SelectNextShip);
			MapKey(&Joystick, H2R, PULSE+SelectNextHostileShip);
		}
		else {		
			MapKeyUMD(&Joystick, H2U,
				EXEC("tgPlanetView();"),																	// U - Toggle - Front/Back view of planet
				PULSE+SelectTargetAhead,																	// M - Target ahead
				PULSE+SelectTargetAhead																		// D - Target ahead
				);
				
			MapKeyUMD(&Joystick, H2D,
				0,																							// U
				PULSE+SelectHighestThreat,																	// M - default - Target highest threat
				PULSE+WingmanTarget																			// D - Select currently selected wing-man's target
				);
				
			MapKeyUMD(&Joystick, H2L,
				0,																							// U
				PULSE+SelectNextShip,																		// M - default - Cycle selection of Next Ship
				SEQ(PULSE+SelectWingman1, PULSE+SelectWingman2, PULSE+SelectWingman3)						// D - Cycle selection of Wing-men
				);
				
			MapKeyUMD(&Joystick, H2R,
				0,																							// U
				PULSE+SelectNextHostileShip,																// M - default - Cycle selection of Next Hostile
				PULSE+WingmanNavlock																		// D - Select currently selected wing-man's NAV target
				);
		}
	
//		(Data Management Switch)		// Power (PIP) Management
//		------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, H3U, PULSE+PowerEng);
			MapKey(&Joystick, H3D, PULSE+BalancePower);		
			MapKey(&Joystick, H3L, PULSE+PowerSys);			
			MapKey(&Joystick, H3R, PULSE+PowerWep);
		}
		else {
			MapKey(&Joystick, H3U, EXEC("fnPIPManager(ENG);"));												// Fire Engine focussed PIP sequence
			MapKey(&Joystick, H3D, PULSE+BalancePower);														// Balance PIP sequence
			MapKey(&Joystick, H3L, EXEC("fnPIPManager(SYS);"));												// Fire System focussed PIP sequence
			MapKey(&Joystick, H3R, EXEC("fnPIPManager(WEP);"));												// Fire Weapon focussed PIP sequence
		}

//		(Countermeasures Management Switch)		// Countermeasures and camera/FSS Zoom
//		-----------------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, H4U, PULSE+UseShieldCell);
			MapKey(&Joystick, H4D, PULSE+DeployHeatSink);
			MapKey(&Joystick, H4L, ChargeECM);
			MapKey(&Joystick, H4R, PULSE+FireChaff);
			MapKey(&Joystick, H4P, 0);			
		}
		else {
			MapKeyUMD(&Joystick, H4U,
				EXEC("fnAdvancedSCB(2);"),																	// U - Double Bank + 1 Heatsink
				TEMPO(EXEC("fnAdvancedSCB(0);"), EXEC("fnAdvancedSCB(1);"), LongPress),						// M - Fire Shield Cell Bank
				CameraZoomIn																				// D - Camera/FSS Zoom - IN
				);
				
			MapKeyUMD(&Joystick, H4D,
				0,																							// U -
				EXEC("fnHeatsink();"),																		// M - Fire Heat Sink
				CameraZoomOut																				// D - Camera/FSS Zoom - OUT
				);
	
			MapKeyUMD(&Joystick, H4L,
				0,																							// U -
				EXEC("ActKey(KEYON+ChargeECM); printf(\"! ECM Charging...\");"),							// M - Charge ECM (Electronic Counter Measures)
				CameraBlurOut																				// D - Camera Blur - OUT
				);
	
			MapKeyRUMD(&Joystick, H4L,				// RELEASE
				0,																							// RU - 
				EXEC("ActKey(ChargeECM); printf(\"Fired !\\x0a\");"),										// RM - Fire ECM when trigger is released
				0																							// RD - 
				);
	
			MapKeyUMD(&Joystick, H4R,
				0,																							// U -
				EXEC("fnChaff();"),																			// M - Fire Chaff
				CameraBlurIn																				// D - Camera Blur - IN
				);
				
			MapKeyUMD(&Joystick, H4P,
				EXEC("fnPIPMode(0);"),																		// U - Reset PIPMode 
				EXEC("fnPIPMode(1);"),																		// M - Increment PIPMode
				EXEC("fnPIPMode(2);")																		// D - Decrement PIPMode 
				);
		}
			
// ------------------------------------ //
// Map Throttle LEVER switches and hats //
// ------------------------------------ //

//		(Slew Control Button)		// Miscellaneous
//		---------------------
		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, SC, PULSE+ResetHeadOrientation);
		}
		else {
			MapKeyUMD(&Throttle, SC,
				PULSE+ShowConnectionStatus,							// U - Display Bandwidth counters only. Alt = "mShowGameStats"
				PULSE+ResetHeadOrientation,							// M - default - reset EDTracker centre
				0													// D - 
				);
		}	
// 		(Left Throttle Button)	// Headlook On/Off / External Camera
//		----------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, LTB, PULSE+LookOnOff);
		}
		else {
			MapKeyUMD(&Throttle, LTB, 
				EXEC("tgExtCamera();"),								// U - Turn External camera On/Off
				PULSE+LookOnOff,									// M - Toggle HeadLook On/Off
				0													// D - 
				);
		}
	
//		(Pinky Switch)		// Shift Modifier Switch
//		--------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, PSF, 0);								//  ** DO NOT TOUCH ** Used as ShiftButton for IOUMD
			MapKey(&Throttle, PSM, 0);								//  ** DO NOT TOUCH ** Used as ShiftButton for IOUMD
			MapKey(&Throttle, PSB, 0);								//  ** DO NOT TOUCH ** Used as ShiftButton for IOUMD
		}
		else {
			MapKey(&Throttle, PSF, REXEC(9, 3000, "fnSoundFX(\"boop\", 50);", RNOSTOP));	//  ShiftButton: Sound Reminder every 3 seconds
			MapKeyR(&Throttle, PSF, EXEC("StopAutoRepeat(9);"));		//RELEASE			//  Cancel reminder soundfx

			MapKey(&Throttle, PSM, 0);														//  ShiftButton for IOUMD
			
			MapKey(&Throttle, PSB, REXEC(9, 3000, "fnSoundFX(\"boop\", 50);", RNOSTOP));	//  ShiftButton: Sound reminder every 3 seconds
			MapKeyR(&Throttle, PSB, EXEC("StopAutoRepeat(9);"));		//RELEASE			//  Cancel reminder soundfx					
		}

//		(Coolie Switch)		// Frame Shift Drive functions
//		---------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, CSU, PULSE+Supercruise);
			MapKey(&Throttle, CSD, PULSE+HyperJump);
			MapKey(&Throttle, CSL, PULSE+SelectNextSystemInRoute);
			MapKey(&Throttle, CSR, PULSE+OrbitLines);
			}
		else {
			MapKey(&Throttle, CSU, EXEC("tgWarpDrive(0);"));		// Toggle: Engage Super-cruise Engine
			MapKey(&Throttle, CSD, EXEC("tgWarpDrive(1);"));		// Toggle: Initiate Hyper Jump
			MapKey(&Throttle, CSL, PULSE+SelectNextSystemInRoute);	// Select Next System in Route
			MapKey(&Throttle, CSR, PULSE+OrbitLines);				// Toggle: Turn Orbit lines ON/OFF
		}
		
//		(Mike Switch)		// Communications Controller functions
//		-------------

		if (EnableTFRPRudder == 0) {
			MapKey(&Throttle, MSU, RollLeft);					// Alternate Roll Control - Counter Clockwise
			MapKey(&Throttle, MSD, RollRight);					// Alternate Roll Control - Clockwise
			MapKey(&Throttle, MSL, YawRight);					// Alternate Yaw Control - Left 
			MapKey(&Throttle, MSR, YawLeft);					// Alternate Yaw Control - Right 
		}
		else {
			MapKey(&Throttle, MSU, 0);							// <not mapped>
			MapKey(&Throttle, MSD, 0);							// <not mapped>
			MapKey(&Throttle, MSL, 0);							// <not mapped>
			MapKey(&Throttle, MSR, 0);							// <not mapped>
		}
			
		MapKey(&Throttle, MSP, 0);								// Reserved for Communications functions
		
		
//		(Speed Brake)		// Reverse Throttle function modifiers
//		-------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, SPDF, PULSE+ReverseThrottle);
			MapKeyR(&Throttle, SPDF, PULSE+ReverseThrottle);	// RELEASE
			MapKey(&Throttle, SPDB, PULSE+EngineBoost);
		}
		else {
			MapKeyUMD(&Throttle, SPDF,
				EXEC("tgReverseThrust(0);"),						// U - Reverse Only			- No Speedbrake
				EXEC("tgReverseThrust(1);"),						// M - Standard Reverse		- Deploy Speedbrake if Hardpoints deployed
				EXEC("tgReverseThrust(2);")							// D - Align Switch only	- Deploy Speedbrake only (no Reverse)
				);
	
			MapKeyR(&Throttle, SPDF, EXEC("tgReverseThrust(1);"));	// RELEASE - Turn off Reverse Throttle
			
			MapKey(&Throttle, SPDB, PULSE+EngineBoost);				// Boost
		}
		
//		(Boat Switch)		//
//		-------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, BSF, 0); 
			MapKey(&Throttle, BSM, 0);
			MapKey(&Throttle, BSB, 0);
		}
		else {
			MapKeyUMD(&Throttle, BSF, 
				SEQ(PULSE+mNAVBeaconWing, PULSE+mNAVBeaconOff),							// U - NAV Beacon WING/OFF
				0,																		// M - 
				EXEC("tgTxt2Speech();")													// D - Toggle EnableVoice (TextToSpeech)
				);
				
			MapKey(&Throttle, BSM, 0);													// <not currently used>
			
			MapKeyUMD(&Throttle, BSB, 
				PULSE+mReportCrimesToggle,												// U - Report crimes against me ON/OFF
				0,																		// M -
				0																		// D -
				);
		}
	
//		(China Hat)			// Subsystem Targetting
//		-----------

		MapKey(&Throttle, CHF, PULSE+TargetNextSubsystem);
		MapKey(&Throttle, CHB, PULSE+TargetPrevSubsystem);
		
// ---------------------------------------//
// Map Throttle BASE buttons and switches //
// ---------------------------------------//

//		(AutoPilot Select)	// JoystickCurves Selector
//		------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, APPAT, 0);
			MapKey(&Throttle, APAH,  0);
			MapKey(&Throttle, APALT, 0);
		}
		else {
			MapKeyIO(&Throttle, APPAT,
			EXEC("fnSetCurves(MEDIUM, CurveInfo);"),									// I - Set Curves = MEDIUM
			EXEC("fnSetCurves(MILD, CurveInfo);")										// O - Set Curves = MILD
			);
			
			MapKey(&Throttle, APAH,  EXEC("fnSetCurves(OFF, CurveInfo);"));				// Set Curves = OFF
			
			MapKeyIO(&Throttle, APALT, 
				EXEC("fnSetCurves(SLOWEST, CurveInfo);"),								// I - Set Curves = SLOWEST 
				EXEC("fnSetCurves(SLOW, CurveInfo);")									// O - Set Curves = SLOW
				);
		}
		
//		(Enhanced Attitude Control (EAC) Arm/Off)
//		-----------------------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, EACON, PULSE+SilentRunning);
			MapKey(&Throttle, EACOFF, PULSE+SilentRunning);
		}
		else {
			MapKeyIO(&Throttle, EACON,
				EXEC("tgSilentRunning(STROBE);"),												// I - Strobe Silent running every 2 seconds
				EXEC("tgSilentRunning(ON);")													// O - Engage Silent Running
			);
			
			MapKey(&Throttle, EACOFF, EXEC("tgSilentRunning(OFF);"));
		}
		
//		(Radar Altimeter)
//		-----------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, RDRNRM, PULSE+CargoScoop);
			MapKey(&Throttle, RDRDIS, PULSE+CargoScoop);
		}
		else {
			MapKeyIOUMD(&Throttle, RDRNRM,
				PULSE+JettisonAllCargo,															// IU - About as safe as I can make it!
				0,																				// OU
				0,																				// IM
				EXEC("tgCargoScoop(DEPLOY);"),													// OM - Deploy Cargo Scoop
				0,																				// ID
				0																				// OD
			);
		
			MapKey(&Throttle, RDRDIS, EXEC("tgCargoScoop(RETRACT);"));
		}

//		(Landing Gear Horn)
//		-------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, LDGH, 0); 
		}
		else {
			MapKeyIO(&Throttle, LDGH, 
				PULSE+mClearAllChatBox,															// Clear all 3 chat box windows
				PULSE+mClearChatBox																// Clear currently selected chat box window
				);
		}

//		(Autopilot Engage)
//		------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, APENG, 0); 
		}
		else {
			MapKeyIO(&Throttle, APENG, 
				EXEC("fnHangerServices(1);"),													// I - Hanger Services
				EXEC("fnRequestDock();")														// O - Request Docking
				);
		}

//		(Flaps)
//		-------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, FLAPU, PULSE+GalMap);
			MapKeyR(&Throttle, FLAPU,  PULSE+GalMap);		// RELEASE
			
			MapKey(&Throttle, FLAPM, 0);
			
			MapKey(&Throttle, FLAPD, PULSE+SystemMap);
			MapKeyR(&Throttle, FLAPD,  PULSE+SystemMap);	// RELEASE			
			}
		else {
			MapKeyUMD(&Throttle, FLAPU,
				EXEC("fnVoiceVolume(INCREASE);"),												// U - Increase TextToSpeech volume
				PULSE+GalMap,																	// M - Galaxy Map - ON
				EXEC("fnLEDBrightness(INCREASE);")												// D - Increase LED Brightness 
				);
				
			MapKeyRUMD(&Throttle, FLAPU,				// RELEASE
				0,																				// RU -
				PULSE+GalMap,																	// RM - Galaxy View - OFF
				0																				// RD -
				);
				
			MapKey(&Throttle, FLAPM, 0);
				
			MapKeyUMD(&Throttle, FLAPD,
				EXEC("fnVoiceVolume(DECREASE);"),												// U - Decrease TextToSpeech volume
				PULSE+SystemMap,																// M - System Map view - ON
				PULSE+LED(&Throttle, LED_INTENSITY, 0)											// D - Turn Throttle Base LEDs off 
				);
				
			MapKeyRUMD(&Throttle, FLAPD,				// RELEASE
				0,																				// RU -
				PULSE+SystemMap,																// RM - System Map - OFF
				EXEC("fnLEDBrightness();")														// RD - Turn Throttle Base LEDs on
				);
		}
		
//		(Auxiliary Power Unit)
//		----------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, APUON, 0);
			MapKey(&Throttle, APUOFF, 0);
		}
		else {
			MapKey(&Throttle, APUON, EXEC("fnDeploySRV(DEPLOY);"));								// "Start"	- Deploy SRV
			MapKey(&Throttle, APUOFF, EXEC("fnDeploySRV(RECOVER);"));							// "OFF"	- Board Ship
		}

//		(Engine Operate - Right)
//		------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, EORIGN, 0);
		}
		else {
			MapKey(&Throttle, EORIGN, EXEC("fnDRShip();"));										// From SRV - Recall/Dismiss Ship
		}
		
		MapKey(&Throttle, EORMOTOR, PULSE+HideShipGUI);											// Toggle: Ship GUI OFF
		MapKeyR(&Throttle, EORMOTOR, PULSE+HideShipGUI);	// RELEASE							// Toggle: Ship GUI ON

//		(Engine Operate - Left)
//		-----------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, EOLIGN, 0);
		}
		else {
			MapKeyUMD(&Throttle, EOLIGN,														// Menu Log to ...
				 EXEC("fnModeSwitch(0);"),														// U - OPEN Mode
				 EXEC("fnModeSwitch(1);"),														// M - PRIVATE Mode
				 EXEC("fnModeSwitch(2);")														// D - SOLO Mode
				 );
		}
				 
		MapKey(&Throttle, EOLNORM, 0);															// <not currently used>
		MapKey(&Throttle, EOLMOTOR, PULSE+mChangeColours);										// Toggle Engine and Weapon Colours

//		(Engine Fuel Flow - Right)
//		--------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, EFRNORM, 0);
		}
		else {
			MapKeyUMD(&Throttle, EFRNORM,
				EXEC("GameLoaded = 0;"),														// U - Reset GameLoaded flag
				EXEC("fnSetLEDs();"),															// M - Reset Status LEDs
				EXEC("fnPrintState();")															// D - Print Status Page
				);
		}
				
		MapKey(&Throttle, EFROVER, 0);														// <not currently used>

//		(Engine Fuel Flow - Left)
//		-------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, EFLNORM, 0);
		}
		else {
			MapKeyUMD(&Throttle, EFLNORM,
				EXEC("fnDebug(2);"),															// U - Debug tool: Turn ShowFlags ON
				EXEC("fnDebug(1);"),															// M - Debug tool: Turn Debug ON
				EXEC("fnDebug(3);")																// D - Debug tool: Turn Debug and ShowFlags ON		
				);
	
			MapKeyR(&Throttle, EFLNORM, EXEC("fnDebug(0);"));	// RELEASE						// Debug tool: Turn Debug and ShowFlags OFF 
		}
				
		MapKey(&Throttle, EFLOVER, 0);														// <not currently used>

//		(Engine Idle - Left)
//		--------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, IDLELON, 0);
			MapKey(&Throttle, IDLELOFF, 0);
		}
		else {
			MapKey(&Throttle, IDLELON, EXEC("fnIdleLock(1);"));									// Enter Hanger and Station Services if Ship else Handbrake if SRV
			MapKey(&Throttle, IDLELOFF, EXEC("fnIdleLock(0);"));								// Exit Hanger, Lift off if in Ship, else Handbrake off if in SRV
		}

//		(Engine Idle - Right)
//		---------------------
		
		MapKey(&Throttle, IDLERON, 0);														// <not currently used>
		MapKey(&Throttle, IDLEROFF, 0);														// <not currently used>

	}	// end of MainKeyMap
	

// =============================================================================================================================================
// =============================================================================================================================================


// --------------------------- //
//  KeyMaps for Training Mode  //
// --------------------------- //

	// FUNCTION:	This MapKey set is called at startup if game is not running and user setting 'TrainingEnabled' is set to 1
	//				Also called from fnsProcessFlags() when we detect Game has halted

	int TrainingMap() {

// ---------------------------------------- //
// Map Joystick triggers, switches and hats //
// ---------------------------------------- //

//		(Gun Trigger - Primary Fire)
//		----------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, TG1, EXEC("fnVPOutput(\"Primary Fire\");"));
		}
		else {
			MapKeyUMD(&Joystick, TG1,		// (Gun Trigger - Stage 1)
				EXEC("fnVPOutput(\"Toggle Primary Trigger Mode\");"),
				EXEC("fnVPOutput(\"Primary Fire\");"),
				EXEC("fnVPOutput(\"Advanced Primary trigger mode\");")
				);
		}
							
		MapKey(&Joystick, TG2, EXEC("fnVPOutput(\"Not mapped\");"));	// (Gun Trigger - Stage 2)

//		(Master Mode Control Button)
//		----------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, S1, EXEC("fnVPOutput(\"Toggle Hardpoints\");"));
		}
		else {		
			MapKeyUMD(&Joystick, S1, 
				EXEC("fnVPOutput(\"Toggle HUD Mode\");"),
				EXEC("fnVPOutput(\"Toggle Hardpoints\");"),
				EXEC("fnVPOutput(\"Toggle Joystick X Axis between Roll and Yaw\");")
				);
		}
	
//		(Weapons Release Button - Secondary Fire)
//		-----------------------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, S2, EXEC("fnVPOutput(\"Secondary Fire\");"));
		}
		else {		
			MapKeyUMD(&Joystick, S2,
				EXEC("fnVPOutput(\"Toggle Secondary Trigger Mode\");"),
				EXEC("fnVPOutput(\"Secondary Fire\");"),
				EXEC("fnVPOutput(\"Advanced Secondary trigger mode\");")
				);
		}
				
// 		(Nosewheel Steering Button)
//		---------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, S3, EXEC("fnVPOutput(\"Not mapped\");"));
		}
		else {	
			MapKey(&Joystick, S3, TEMPO(EXEC("fnVPOutput(\"I O layer button\");"), 0));
		}

//		(Joystick Pinky Lever Switch)
//		-----------------------------

		MapKey(&Joystick, S4, EXEC("fnVPOutput(\"Toggle Flight Assist\");"));

//		China Hat (Trim Switch)
//		-----------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, H1U, EXEC("fnVPOutput(\"Select next fire group\");"));
			MapKey(&Joystick, H1D, EXEC("fnVPOutput(\"Select Previous fire group\");"));
			MapKey(&Joystick, H1L, EXEC("fnVPOutput(\"Toggle Landing gear\");"));
			MapKey(&Joystick, H1R, EXEC("fnVPOutput(\"Toggle ship lights\");"));
		}
		else {		
			MapKeyUMD(&Joystick, H1U,
				EXEC("fnVPOutput(\"Toggle F S S Mode\");"),
				EXEC("fnVPOutput(\"Select next fire group\");"),
				EXEC("fnVPOutput(\"Exit D S S Mode\");")
				);
	
			MapKey(&Joystick, H1D, EXEC("fnVPOutput(\"Select Previous fire group\");"));
			
			MapKey(&Joystick, H1L, EXEC("fnVPOutput(\"Hold for half second to Toggle Landing gear\");"));
	
			
			MapKeyUMD(&Joystick, H1R,
				EXEC("fnVPOutput(\"Toggle Night Vision\");"),
				EXEC("fnVPOutput(\"Hold for half second to toggle ship lights\");"),
				EXEC("fnVPOutput(\"Not mapped\");")
				);
		}
	
//		(Target Management Switch)		// Target Designator
//		--------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, H2U, EXEC("fnVPOutput(\"Select target ahead\");"));
			MapKey(&Joystick, H2D, EXEC("fnVPOutput(\"Target highest threat\");"));
			MapKey(&Joystick, H2L, EXEC("fnVPOutput(\"Target next ship\");"));
			MapKey(&Joystick, H2R, EXEC("fnVPOutput(\"Target next hostile\");"));
		}
		else {		
			MapKeyUMD(&Joystick, H2U,
				EXEC("fnVPOutput(\"Toggle Front-Back view of planet in DSS Mode\");"),
				EXEC("fnVPOutput(\"Select target ahead\");"),
				EXEC("fnVPOutput(\"Select target ahead\");")
				);
				
			MapKeyUMD(&Joystick, H2D,
				EXEC("fnVPOutput(\"Not mapped\");"),
				EXEC("fnVPOutput(\"Target highest threat\");"),
				EXEC("fnVPOutput(\"Target wingmans target\");")
				);
				
			MapKeyUMD(&Joystick, H2L,
				EXEC("fnVPOutput(\"Not mapped\");"),
				EXEC("fnVPOutput(\"Target next ship\");"),
				EXEC("fnVPOutput(\"Select next wingman\");")
				);
				
			MapKeyUMD(&Joystick, H2R,
				EXEC("fnVPOutput(\"Not mapped\");"),
				EXEC("fnVPOutput(\"Target next hostile\");"),
				EXEC("fnVPOutput(\"Select Wingmans NAV Lock\");")
				);
		}
	
//		(Data Management Switch)		// Power (PIP) Management
//		------------------------

		MapKey(&Joystick, H3U, EXEC("fnVPOutput(\"PIP Manager, Engine Focussed\");"));
		MapKey(&Joystick, H3D, EXEC("fnVPOutput(\"PIP Manager, Balance PIPs\");"));
		MapKey(&Joystick, H3L, EXEC("fnVPOutput(\"PIP Manager, System Focussed\");"));
		MapKey(&Joystick, H3R, EXEC("fnVPOutput(\"PIP Manager, Weapon Focussed\");"));
		
//		(Countermeasures Management Switch)		// Countermeasures and camera/FSS Zoom
//		-----------------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Joystick, H4U, EXEC("fnVPOutput(\"Shield cell bank\");"));
			MapKey(&Joystick, H4D, EXEC("fnVPOutput(\"Fire a heat sink\");"));
			MapKey(&Joystick, H4L, EXEC("fnVPOutput(\"Hold to charge ECM, release to fire\");"));
			MapKey(&Joystick, H4R, EXEC("fnVPOutput(\"Fire chaff\");"));
			MapKey(&Joystick, H4P, EXEC("fnVPOutput(\"Not mapped\");"));			
		}
		else {
			MapKeyUMD(&Joystick, H4U,
				EXEC("fnVPOutput(\"Double Shield Cell plus one heat sink\");"),
				EXEC("fnVPOutput(\"Short press for single shield cell bank, hold for half second to include a heatsink\");"),
				EXEC("fnVPOutput(\"Camera zoom in\");")
				);
				
			MapKeyUMD(&Joystick, H4D,
				EXEC("fnVPOutput(\"Not mapped\");"),
				EXEC("fnVPOutput(\"Fire a heat sink\");"),
				EXEC("fnVPOutput(\"Camera zoom out\");")
				);
	
			MapKeyUMD(&Joystick, H4L,
				EXEC("fnVPOutput(\"Not mapped\");"),
				EXEC("fnVPOutput(\"Hold to charge ECM, release to fire\");"),
				EXEC("fnVPOutput(\"Camera blur out\");")
				);
	
			MapKeyUMD(&Joystick, H4R,
				EXEC("fnVPOutput(\"Not mapped\");"),
				EXEC("fnVPOutput(\"Fire chaff\");"),
				EXEC("fnVPOutput(\"Camera blur in\");")
				);
				
			MapKeyUMD(&Joystick, H4P,
				EXEC("fnVPOutput(\"Reset PIP Mode\");"),
				EXEC("fnVPOutput(\"Increment PIP Mode\");"),
				EXEC("fnVPOutput(\"Decrement PIP Mode\");")
				);
		}
	
// ------------------------------------ //
// Map Throttle LEVER switches and hats //
// ------------------------------------ //

//		(Slew Control Button)		// Miscellaneous
//		---------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, SC, EXEC("fnVPOutput(\"Re-centre E D Tracker\");"));
		}
		else {
			MapKeyUMD(&Throttle, SC,
				EXEC("fnVPOutput(\"Show connection status\");"),
				EXEC("fnVPOutput(\"Re-centre E D Tracker\");"),
				EXEC("fnVPOutput(\"Not mapped\");")
				);
		}
	
// 		(Left Throttle Button)	// Headlook On/Off / External Camera
//		----------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, LTB, EXEC("fnVPOutput(\"Toggle Head look\");"));
		}
		else {
			MapKeyUMD(&Throttle, LTB,
				EXEC("fnVPOutput(\"Toggle External Camera\");"),
				EXEC("fnVPOutput(\"Toggle Head look\");"),
				EXEC("fnVPOutput(\"Not mapped\");")
				);
		}
	
//		(Pinky Switch)		// Modifier Switch
//		--------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, PSF, EXEC("fnVPOutput(\"Not mapped\");"));
			MapKey(&Throttle, PSM, EXEC("fnVPOutput(\"Not mapped\");"));
			MapKey(&Throttle, PSB, EXEC("fnVPOutput(\"Not mapped\");"));
		}
		else {
			MapKey(&Throttle, PSF, EXEC("fnVPOutput(\"UMD Layer Forward and sound reminder every 3 seconds\");"));
			MapKeyR(&Throttle, PSF, EXEC("fnVPOutput(\"UMD Layer Middle and cancel reminder sound\");"));
			
//			MapKey(&Throttle, PSM, EXEC("fnVPOutput(\"U M D Layer Middle\");"));
			
			MapKey(&Throttle, PSB, EXEC("fnVPOutput(\"UMD Layer Back and sound reminder every 3 seconds\");"));
			MapKeyR(&Throttle, PSB, EXEC("fnVPOutput(\"UMD Layer Middle and cancel reminder sound\");"));
		}
	
//		(Coolie Switch)		// Frame Shift Drive functions
//		---------------


		MapKey(&Throttle, CSU, EXEC("fnVPOutput(\"Toggle Supercruise\");"));
		MapKey(&Throttle, CSD, EXEC("fnVPOutput(\"Toggle Hyperjump\");"));
		MapKey(&Throttle, CSL, EXEC("fnVPOutput(\"Select next system in route\");"));
		MapKey(&Throttle, CSR, EXEC("fnVPOutput(\"Toggle orbit lines\");"));


//		(Mike Switch)		// Communications Controller functions
//		-------------

		if (EnableTFRPRudder == 0) {
			MapKey(&Throttle, MSU, EXEC("fnVPOutput(\"Alternate Roll Control Left\");"));
			MapKey(&Throttle, MSD, EXEC("fnVPOutput(\"Alternate Roll Control Right\");"));
			MapKey(&Throttle, MSL, EXEC("fnVPOutput(\"Alternate Yaw Control Right\");"));
			MapKey(&Throttle, MSR, EXEC("fnVPOutput(\"Alternate Yaw Control Left\");"));
		}
		else {
			MapKey(&Throttle, MSU, EXEC("fnVPOutput(\"Not mapped\");"));
			MapKey(&Throttle, MSD, EXEC("fnVPOutput(\"Not mapped\");"));
			MapKey(&Throttle, MSL, EXEC("fnVPOutput(\"Not mapped\");"));
			MapKey(&Throttle, MSR, EXEC("fnVPOutput(\"Not mapped\");"));		
		}
		
		MapKey(&Throttle, MSP, EXEC("fnVPOutput(\"Not mapped\");"));
	
//		(Speed Brake)		// Reverse Throttle function modifiers
//		-------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, SPDF, EXEC("fnVPOutput(\"Reverse thrusters\");"));
			MapKeyR(&Throttle, SPDF, PULSE+ReverseThrottle);	// RELEASE
		}
		else {
			MapKeyUMD(&Throttle, SPDF,
				EXEC("fnVPOutput(\"Reverse thrusters, no speed brake\");"),
				EXEC("fnVPOutput(\"Reverse thrusters with speed brake\");"),
				EXEC("fnVPOutput(\"Fix Switch position alignment to match in game for reverse thrust\");")
				);
		}
	
		MapKeyR(&Throttle, SPDF, EXEC("fnVPOutput(\"Forward Thrusters\");"));		// RELEASE

		MapKey(&Throttle, SPDB, EXEC("fnVPOutput(\"Engine Boost\");"));

	
//		(Boat Switch)		//
//		-------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, BSF, EXEC("fnVPOutput(\"Not mapped\");")); 
			MapKey(&Throttle, BSB, EXEC("fnVPOutput(\"Not mapped\");"));
		}
		else {
			MapKeyUMD(&Throttle, BSF, 
				EXEC("fnVPOutput(\"Toggle Wingman Beacon between Wing and off\");"),
				EXEC("fnVPOutput(\"Not mapped\");"),
				EXEC("fnVPOutput(\"Toggle Text to speech function off and on\");")
				);
						
			MapKeyUMD(&Throttle, BSB, 
				EXEC("fnVPOutput(\"Toggle report crimes against me on and off\");"),
				EXEC("fnVPOutput(\"Not mapped\");"),
				EXEC("fnVPOutput(\"Not mapped\");")
				);
		}
	
//		(China Hat)			// Subsystem Targetting
//		-----------

		MapKey(&Throttle, CHF, EXEC("fnVPOutput(\"Target Next Subsystem\");"));
		MapKey(&Throttle, CHB, EXEC("fnVPOutput(\"Target Previous Subsystem\");"));
		

// ---------------------------------------//
// Map Throttle BASE buttons and switches //
// ---------------------------------------//

//		(AutoPilot Select)	// JoystickCurves Selector
//		------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, APPAT, EXEC("fnVPOutput(\"Not mapped\");"));
			MapKey(&Throttle, APAH,  EXEC("fnVPOutput(\"Not mapped\");"));
			MapKey(&Throttle, APALT, EXEC("fnVPOutput(\"Not mapped\");"));
		}
		else {
			MapKeyIO(&Throttle, APPAT, 
			EXEC("fnVPOutput(\"Set axis curves medium\");"),
			EXEC("fnVPOutput(\"Set axis curves mild\");")
			);
			
			MapKey(&Throttle, APAH,  EXEC("fnVPOutput(\"Set axis curves off\");"));
			
			MapKeyIO(&Throttle, APALT, 
				EXEC("fnVPOutput(\"Set axis curves slowest\");"),
				EXEC("fnVPOutput(\"Set axis curves slow\");")
				);
		}
	
//		(Enhanced Attitude Control (EAC) Arm/Off)
//		-----------------------------------------
		
		MapKey(&Throttle, EACON, EXEC("fnVPOutput(\"Engage Silent running\");"));
		MapKey(&Throttle, EACOFF, EXEC("fnVPOutput(\"Disengage Silent Running\");"));

//		(Radar Altimeter)
//		-----------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, RDRNRM, EXEC("fnVPOutput(\"Deploy cargo scoop\");"));
		}
		else {
			MapKeyIOUMD(&Throttle, RDRNRM, 
				EXEC("fnVPOutput(\"Jettison Cargo\");"),
				EXEC("fnVPOutput(\"Not mapped\");"),
				EXEC("fnVPOutput(\"Not mapped\");"),			
				EXEC("fnVPOutput(\"Deploy cargo scoop\");"),
				EXEC("fnVPOutput(\"Not mapped\");"),
				EXEC("fnVPOutput(\"Not mapped\");")
			);
		}
			
		MapKey(&Throttle, RDRDIS, EXEC("fnVPOutput(\"Retract cargo scoop\");"));

//		(Landing Gear Horn)
//		-------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, LDGH, EXEC("fnVPOutput(\"Not mapped\");")); 
		}
		else {
			MapKeyIO(&Throttle, LDGH, 
				EXEC("fnVPOutput(\"Clear all chat boxes\");"),
				EXEC("fnVPOutput(\"Clear currently selected chat box\");")
				);
		}
	
//		(Autopilot Engage)
//		------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, APENG, EXEC("fnVPOutput(\"Not mapped\");")); 
		}
		else {
			MapKeyIO(&Throttle, APENG,
				EXEC("fnVPOutput(\"Enter Hanger services\");"),
				EXEC("fnVPOutput(\"Request docking permission\");")
				);
		}
	
//		(Flaps)
//		-------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, FLAPU, EXEC("fnVPOutput(\"Open Galaxy Map\");"));
			MapKeyR(&Throttle, FLAPU, EXEC("fnVPOutput(\"Close Galaxy Map\");"));	// RELEASE
			MapKey(&Throttle, FLAPD, EXEC("fnVPOutput(\"Open System Map\");"));
			MapKeyR(&Throttle, FLAPD, EXEC("fnVPOutput(\"Close System Map\");"));	// RELEASE			
			}
		else {
			MapKeyUMD(&Throttle, FLAPU,
				EXEC("fnVPOutput(\"Increase voice feedback volume\");"),
				EXEC("fnVPOutput(\"Open Galaxy Map\");"),
				EXEC("fnVPOutput(\"Increase LED brightness\");")
				);
	
			MapKeyRUMD(&Throttle, FLAPU,		// RELEASE
				EXEC("fnVPOutput(\"Not mapped\");"),
				EXEC("fnVPOutput(\"Close Galaxy Map\");"),
				EXEC("fnVPOutput(\"Not mapped\");")
				);
	
	
			MapKeyUMD(&Throttle, FLAPD,
				EXEC("fnVPOutput(\"Decrease voice feedback volume\");"),
				EXEC("fnVPOutput(\"Open System Map\");"),
				EXEC("fnVPOutput(\"Turn Throttle LEDs off\");")
				);
	
			MapKeyRUMD(&Throttle, FLAPD,		// RELEASE
				EXEC("fnVPOutput(\"Not mapped\");"),
				EXEC("fnVPOutput(\"Close System Map\");"),
				EXEC("fnVPOutput(\"Turn Throttle LEDs on\");")
				);
		}
	

//		(Auxiliary Power Unit)
//		----------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, APUON, EXEC("fnVPOutput(\"Not mapped\");"));
			MapKey(&Throttle, APUOFF, EXEC("fnVPOutput(\"Not mapped\");"));
		}
		else {
			MapKey(&Throttle, APUON, EXEC("fnVPOutput(\"Deploy SRV\");"));
			MapKey(&Throttle, APUOFF, EXEC("fnVPOutput(\"Recover SRV\");"));
		}
	
//		(Engine Operate - Right)
//		------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, EORIGN, EXEC("fnVPOutput(\"Not mapped\");"));
		}
		else {
			MapKey(&Throttle, EORIGN, EXEC("fnVPOutput(\"Dismiss or recall ship\");"));
		}
		
		MapKey(&Throttle, EORMOTOR, EXEC("fnVPOutput(\"Toggle Ship GUI off\");"));			
		MapKeyR(&Throttle, EORMOTOR, EXEC("fnVPOutput(\"Toggle ship GUI on\");"));		// RELEASE

		
//		(Engine Operate - Left)
//		-----------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, EOLIGN, EXEC("fnVPOutput(\"Not mapped\");"));
		}
		else {
			MapKeyUMD(&Throttle, EOLIGN,
				 EXEC("fnVPOutput(\"Switch Game mode to Open\");"),
				 EXEC("fnVPOutput(\"Switch Game mode to Private Group\");"),
				 EXEC("fnVPOutput(\"Switch Game mode to solo\");")
				 );
		}
				 
		MapKey(&Throttle, EOLMOTOR, EXEC("fnVPOutput(\"Toggle Engine and Weapon colours\");"));		

//		(Engine Fuel Flow - Right)
//		--------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, EFRNORM, EXEC("fnVPOutput(\"Not mapped\");"));
		}
		else {
			MapKeyUMD(&Throttle, EFRNORM,
				EXEC("fnVPOutput(\"Set Gameloaded flag to off\");"),
				EXEC("fnVPOutput(\"Reset status LEDs\");"),
				EXEC("fnVPOutput(\"Print status page to console\");")
				);
		}
				
		MapKey(&Throttle, EFROVER, EXEC("fnVPOutput(\"Not mapped\");"));

//		(Engine Fuel Flow - Left)
//		-------------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, EFLNORM, EXEC("fnVPOutput(\"Not mapped\");"));
			MapKey(&Throttle, EFLOVER, EXEC("fnVPOutput(\"Not mapped\");"));
		}
		else {
			MapKeyUMD(&Throttle, EFLNORM,
				EXEC("fnVPOutput(\"Turn Showflags on\");"),
				EXEC("fnVPOutput(\"Turn Debug on\");"),
				EXEC("fnVPOutput(\"Turn Debug and Showflags on\");")
				);
	
			MapKeyR(&Throttle, EFLNORM, EXEC("fnVPOutput(\"Turn Debug and Showflags off\");"));		// RELEASE
		}

//		(Engine Idle - Left)
//		--------------------

		if (MapKeyProfile == BASIC) {
			MapKey(&Throttle, IDLELON, EXEC("fnVPOutput(\"Not mapped\");"));
			MapKey(&Throttle, IDLELOFF, EXEC("fnVPOutput(\"Not mapped\");"));
		}
		else {
			MapKey(&Throttle, IDLELON, EXEC("fnVPOutput(\"If in ship, Enter hanger services. If in SRV, handbrake\");"));
			MapKey(&Throttle, IDLELOFF, EXEC("fnVPOutput(\"If in ship, Exit Hanger services and lift off. If in SRV release handbrake\");"));
		}
	
//		(Engine Idle - Right)
//		---------------------
		
		MapKey(&Throttle, IDLERON, 0);				// <not used>
		MapKey(&Throttle, IDLEROFF, 0);				// <not used>

	}	// end of TrainingMap

